#! /usr/bin/env bash

#                  _
#   __ _ _ __ ___ (_)
#  / _` | '_ ` _ \| | gemini
# | (_| | | | | | | | capsule
#  \__, |_| |_| |_|_| generator
#  |___/
#
# Copyright (C) 2021, St√©phane MEYER.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
#
# GMI
# C : 2021/02/07
# M : 2021/12/11
# D : Main program.

source /usr/lib/gmi/core.sh
source /usr/lib/gmi/init.sh
source /usr/lib/gmi/new.sh
source /usr/lib/gmi/edit.sh
source /usr/lib/gmi/micro.sh
source /usr/lib/gmi/files.sh
source /usr/lib/gmi/deploy.sh
source /usr/lib/gmi/archive.sh
source /usr/lib/gmi/list.sh
source /usr/lib/gmi/help.sh
source /usr/lib/gmi/backup.sh

[[ $@ ]] || {
  echo '                 _'
  echo '  __ _ _ __ ___ (_)'
  echo " / _\` | '_ \` _ \| | gemini"
  echo '| (_| | | | | | | | capsule'
  echo ' \__, |_| |_| |_|_| generator'
  echo ' |___/'
  echo
  echo "gmi -- version $__version"
  echo "This program is free software."
  echo -e "It is distributed AS IS with NO WARRANTY.\n"
}

[[ $1 ]] || {
  __err M "type 'gmi help' for more info."
  exit
}

case $1 in
  init   ) init; exit $? ;;
  new    ) shift; new "$*"; exit $? ;;
  post   ) shift; post "$*"; exit $? ;;
  list   ) entry="$(article_list)" ;;
  idx    ) edit_index index; exit $? ;;
  idxm   ) edit_index micro; exit $? ;;
  lista  ) arch=1; entry="$(article_list 1)" ;;
  push   ) deploy; exit $? ;;
  help   ) _help; exit $? ;;
  pushm  ) deploy micro; exit $? ;;
  idxa   ) edit_index archive; exit $? ;;
  archive) confirm && auto_archive; exit $? ;;
  backup ) confirm && backup; exit $? ;;
  restore) restore; exit $? ;;
  *      ) __err E "invalid option '$1'"; exit 1
esac

[[ -a $entry ]] && {
  title="$(get_title "$entry")"
  __err M "${entry#$src*}"
  __err M "$title"
  [[ $arch ]] && printf ":: [e]dit [r]ename [d]elete: "
  [[ $arch ]] || printf ":: [e]dit [r]ename [a]rchive [d]elete: "
  read -r r
  case $r in
    a) [[ $arch ]] || confirm "archive?" && archive "$entry" ;;
    d) confirm "delete?" && delete "$entry" ;;
    e) edit "$entry" ;;
    r) retitle_usr "$entry" ;;
    *) __err M "cancelled." ;;
  esac
  exit $?
}

exit 0
